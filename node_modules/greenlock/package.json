{
  "_args": [
    [
      {
        "raw": "greenlock",
        "scope": null,
        "escapedName": "greenlock",
        "name": "greenlock",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "C:\\Work\\coinkat-web-server"
    ]
  ],
  "_from": "greenlock@latest",
  "_id": "greenlock@2.2.7",
  "_inCache": true,
  "_location": "/greenlock",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/greenlock_2.2.7_1524851098912_0.30035319660478765"
  },
  "_npmUser": {
    "name": "coolaj86",
    "email": "coolaj86@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "greenlock",
    "scope": null,
    "escapedName": "greenlock",
    "name": "greenlock",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/",
    "/greenlock-express"
  ],
  "_resolved": "https://registry.npmjs.org/greenlock/-/greenlock-2.2.7.tgz",
  "_shasum": "8a5d4b7c3394ee9211ca12028cc8fa305db80ab5",
  "_shrinkwrap": null,
  "_spec": "greenlock",
  "_where": "C:\\Work\\coinkat-web-server",
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "https://coolaj86.com/"
  },
  "bugs": {
    "url": "https://git.coolaj86.com/coolaj86/greenlock.js/issues"
  },
  "dependencies": {
    "acme-v2": "^1.0.2",
    "asn1js": "^1.2.12",
    "bluebird": "^3.5.1",
    "certpem": "^1.0.0",
    "homedir": "^0.6.0",
    "le-acme-core": "^2.1.2",
    "le-challenge-fs": "^2.0.2",
    "le-challenge-sni": "^2.0.0",
    "le-sni-auto": "^2.1.3",
    "le-store-certbot": "^2.0.3",
    "localhost.daplie.me-certificates": "^1.3.0",
    "node.extend": "^1.1.5",
    "pkijs": "^1.3.27",
    "rsa-compat": "^1.2.1"
  },
  "description": "Let's Encrypt for node.js on npm",
  "devDependencies": {
    "request": "^2.75.0"
  },
  "directories": {},
  "dist": {
    "shasum": "8a5d4b7c3394ee9211ca12028cc8fa305db80ab5",
    "tarball": "https://registry.npmjs.org/greenlock/-/greenlock-2.2.7.tgz",
    "fileCount": 17,
    "unpackedSize": 74807,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa42GcCRA9TVsSAnZWagAAkXAP/0o142VLqRwmnoZrJ8yI\nBTTrRkF4MvFNkGJ3DZMy6vX3hj1ol4UxSmHoH7IroYUeyuiD3ZV28E9hdj+k\nZv1YKRfTlrqjz5psqBqh85pb7nlkALBNPFZjaxhPXKIUptntW+pF3dJ47J26\nWlAxVt1XizLiaa0XE+0mWq1jwe1L3HgB69qnlLpATWfn4NiNDTIXlVYQJw83\nMePHKrNe5UZwQYg+9UMtfQMUwQKHdmso/NOfMfyhy89Ok+IPCwjY0gZ6nxDI\nWvL6HZHN9aOvRm16ip86kFw/vrfng38+KY3naz+VNe8mVQZTZP7baPVm+wbj\nc6OoNSClpqu3c35vTLQRBkTb8GUmcQP9HHTZpoCVhHNoX2dP8AQW7ksV79xw\ntyeCt5O2RHZ4hMkUv3HcT6rreV4Nr6YiqSzfySpN4e/mm4/ZPh7mD+DJfdws\ni8nFeVXBHO/vombfQKtlfL8rrnvmppfwGSFYtj568L382HFtZyOQtORGMTjz\nkjYFjACPk4J7MDKENeoggbcbuGoYTQRzn1+rqx8N5A8QM842rv+sm2dSR/QO\nU2J3eZdfsIvzhJm/vXWKSshDTkL99DXFl5ZJISejkWbLlaKHrjR+EHkv8N5w\nZiszgexDMdbZRTeryhBr57TMa0VVSwARH2BpW/Mc70p3PsQ16xymoLV1ILfk\nLL/N\r\n=fwFm\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitDependencies": {
    "acme-v2": "git+https://git.coolaj86.com/coolaj86/acme-v2.js.git#v1.0",
    "le-acme-core": "git+https://git.coolaj86.com/coolaj86/le-acme-core.js.git#v2.1"
  },
  "gitHead": "bfe68c04c7052e2d641fb7fe84a436e951186eaa",
  "homepage": "https://git.coolaj86.com/coolaj86/greenlock.js",
  "keywords": [
    "acmev2",
    "acmev02",
    "acme-v2",
    "acme-v02",
    "acme",
    "acme2",
    "acme11",
    "acme-draft11",
    "acme-draft-11",
    "draft",
    "11",
    "free",
    "ssl",
    "tls",
    "https",
    "Let's Encrypt",
    "letsencrypt",
    "letsencrypt-v2",
    "letsencrypt-v02",
    "letsencryptv2",
    "letsencryptv02",
    "letsencrypt2",
    "v2",
    "v02",
    "greenlock",
    "letsencrypt.org",
    "le",
    "lejs",
    "le.js",
    "node",
    "nodejs",
    "node.js",
    "client"
  ],
  "license": "(MIT OR Apache-2.0)",
  "main": "index.js",
  "maintainers": [
    {
      "name": "coolaj86",
      "email": "coolaj86@gmail.com"
    }
  ],
  "name": "greenlock",
  "optionalDependencies": {
    "bluebird": "^3.5.1"
  },
  "readme": "| Sponsored by [ppl](https://ppl.family)\n| [acme-v2.js](https://git.coolaj86.com/coolaj86/acme-v2.js)\n| **greenlock** ([npm](https://www.npmjs.com/package/greenlock))\n| [greenlock-cli](https://git.coolaj86.com/coolaj86/greenlock-cli.js)\n| [greenlock-express](https://git.coolaj86.com/coolaj86/greenlock-express.js)\n| [greenlock-cluster](https://git.coolaj86.com/coolaj86/greenlock-cluster.js)\n| [greenlock-koa](https://git.coolaj86.com/coolaj86/greenlock-koa.js)\n| [greenlock-hapi](https://git.coolaj86.com/coolaj86/greenlock-hapi.js)\n|\n\ngreenlock\n=====\n(previously node-letsencrypt)\n\nAutomatic [Let's Encrypt](https://letsencrypt.org) (ACME) HTTPS / TLS / SSL Certificates for node.js\n\nFree SSL with [90-day](https://letsencrypt.org/2015/11/09/why-90-days.html) HTTPS / TLS Certificates\n\nAre these the droids you're looking for?\n------\n\nThis is a **low-level library** for implementing ACME / LetsEncrypt Clients, CLIs,\nsystem tools, and abstracting storage backends (file vs db, etc).\n\nFor `express`, raw `https` or `spdy`, or `restify` (same as raw https) see\n[**greenlock-express** (previously letsencrypt-express)](https://git.coolaj86.com/coolaj86/greenlock-express.js) and [greenlock-cluster (previously letsencrypt-cluster)](https://git.coolaj86.com/coolaj86/greenlock-cluster.js).\n\nFor `hapi` see [greenlock-hapi (previously letsencrypt-hapi)](https://git.coolaj86.com/coolaj86/greenlock-hapi.js).\n\nFor `koa` or `rill`\nsee [greenlock-koa (previously letsencrypt-koa)](https://git.coolaj86.com/coolaj86/greenlock-koa.js).\n\nFor `bash`, `fish`, `zsh`, `cmd.exe`, `PowerShell`\nsee [**greenlock-cli** (previously letsencrypt-cli)](https://git.coolaj86.com/coolaj86/greenlock-cli.js).\n\n### Now supports **Let's Encrypt v2**!!\n\nInstall\n=======\n\n`greenlock` requires at least two plugins:\none for managing certificate storage and the other for handling ACME challenges.\n\nThe default storage plugin is [`le-store-certbot`](https://git.coolaj86.com/coolaj86/le-store-certbot.js)\nand the default challenge is [`le-challenge-fs`](https://git.coolaj86.com/coolaj86/le-challenge-fs.js).\n\n```bash\nnpm install --save greenlock@2.x\n\nnpm install --save le-store-certbot@2.x   # default plugin for accounts, certificates, and keypairs\nnpm install --save le-challenge-fs@2.x    # default plugin for http-01 challenge\nnpm install --save le-challenge-sni@2.x   # default plugin for tls-sni-01 and tls-sni-02 challenge\nnpm install --save le-acme-core@2.x       # default plugin for ACME spec\nnpm install --save le-sni-auto@2.x        # default plugin for SNICallback\n```\n\n**Important**: Use node v4.5+ or v6.x, node <= v4.4 has a [known bug](https://github.com/nodejs/node/issues/8053) in the `Buffer` implementation.\n\nUsage\n=====\n\nIt's very simple and easy to use, but also very complete and easy to extend and customize.\n\n### Overly Simplified Example\n\nAgainst my better judgement I'm providing a terribly oversimplified example\nof how to use this library:\n\n```javascript\nvar le = require('greenlock').create({ server: 'staging' });\n\nvar opts = {\n  domains: ['example.com'], email: 'user@email.com', agreeTos: true\n};\n\nle.register(opts).then(function (certs) {\n  console.log(certs);\n  // privkey, cert, chain, expiresAt, issuedAt, subject, altnames\n}, function (err) {\n  console.error(err);\n});\n```\n\nYou also need some sort of server to handle the acme challenge:\n\n```javascript\nvar app = express();\napp.use('/', le.middleware());\n```\n\nNote: The `webrootPath` string is a template.\nAny occurance of `:hostname` will be replaced\nwith the domain for which we are requested certificates.\n\n### Useful Example\n\nThe configuration consists of 3 components:\n\n* Storage Backend (search npm for projects starting with 'le-store-')\n* ACME Challenge Handlers (search npm for projects starting with 'le-challenge-')\n* Letsencryt Config (this is all you)\n\n```javascript\n'use strict';\n\nvar LE = require('greenlock');\nvar le;\n\n\n// Storage Backend\nvar leStore = require('le-store-certbot').create({\n  configDir: '~/acme/etc'                                 // or /etc/letsencrypt or wherever\n, debug: false\n});\n\n\n// ACME Challenge Handlers\nvar leHttpChallenge = require('le-challenge-fs').create({\n  webrootPath: '~/acme/var/'                              // or template string such as\n, debug: false                                            // '/srv/www/:hostname/.well-known/acme-challenge'\n});\nvar leSniChallenge = require('le-challenge-sni').create({\n, debug: false\n});\n\n\nfunction leAgree(opts, agreeCb) {\n  // opts = { email, domains, tosUrl }\n  agreeCb(null, opts.tosUrl);\n}\n\nle = LE.create({\n  version: 'draft-11'                                     // 'draft-11' or 'v01'\n                                                          // 'draft-11' is for Let's Encrypt v2 otherwise known as ACME draft 11\n                                                          // 'v02' is an alias for 'draft-11'\n                                                          // 'v01' is for the pre-spec Let's Encrypt v1\n  //\n  // staging API\n  server: 'https://acme-staging-v02.api.letsencrypt.org/directory'\n\n  //\n  // production API\n  //server: 'https://acme-v02.api.letsencrypt.org/directory'\n\n, store: leStore                                          // handles saving of config, accounts, and certificates\n, challenges: {\n    'http-01': leHttpChallenge                            // handles /.well-known/acme-challege keys and tokens\n  , 'tls-sni-01': leSniChallenge                          // handles generating a certificate with the correct name\n  , 'tls-sni-02': leSniChallenge\n  }\n, challengeType: 'http-01'                                // default to this challenge type\n, agreeToTerms: leAgree                                   // hook to allow user to view and accept LE TOS\n//, sni: require('le-sni-auto').create({})                // handles sni callback\n\n                                                          // renewals happen at a random time within this window\n, renewWithin: 14 * 24 * 60 * 60 * 1000                   // certificate renewal may begin at this time\n, renewBy:     10 * 24 * 60 * 60 * 1000                   // certificate renewal should happen by this time\n\n, debug: false\n//, log: function (debug) {console.log.apply(console, args);} // handles debug outputs\n});\n\n\n// If using express you should use the middleware\n// app.use('/', le.middleware());\n//\n// Otherwise you should see the test file for usage of this:\n// le.challenges['http-01'].get(opts.domain, key, val, done)\n\n\n\n// Check in-memory cache of certificates for the named domain\nle.check({ domains: [ 'example.com' ] }).then(function (results) {\n  if (results) {\n    // we already have certificates\n    return;\n  }\n\n\n  // Register Certificate manually\n  le.register({\n\n    domains: ['example.com']                                // CHANGE TO YOUR DOMAIN (list for SANS)\n  , email: 'user@email.com'                                 // CHANGE TO YOUR EMAIL\n  , agreeTos: ''                                            // set to tosUrl string (or true) to pre-approve (and skip agreeToTerms)\n  , rsaKeySize: 2048                                        // 2048 or higher\n  , challengeType: 'http-01'                                // http-01, tls-sni-01, or dns-01\n\n  }).then(function (results) {\n\n    console.log('success');\n\n  }, function (err) {\n\n    // Note: you must either use le.middleware() with express,\n    // manually use le.challenges['http-01'].get(opts, domain, key, val, done)\n    // or have a webserver running and responding\n    // to /.well-known/acme-challenge at `webrootPath`\n    console.error('[Error]: node-greenlock/examples/standalone');\n    console.error(err.stack);\n\n  });\n\n});\n```\n\nHere's what `results` looks like:\n\n```javascript\n{ privkey: ''     // PEM encoded private key\n, cert: ''        // PEM encoded cert\n, chain: ''       // PEM encoded intermediate cert\n, issuedAt: 0     // notBefore date (in ms) parsed from cert\n, expiresAt: 0    // notAfter date (in ms) parsed from cert\n, subject: ''     // example.com\n, altnames: []    // example.com,www.example.com\n}\n```\n\nAPI\n---\n\nThe full end-user API is exposed in the example above and includes all relevant options.\n\n```\nle.register(opts)\nle.check(opts)\n```\n\n### Helper Functions\n\nWe do expose a few helper functions:\n\n* LE.validDomain(hostname) // returns '' or the hostname string if it's a valid ascii or punycode domain name\n\nTODO fetch domain tld list\n\n### Template Strings\n\nThe following variables will be tempalted in any strings passed to the options object:\n\n* `~/` replaced with `os.homedir()` i.e. `/Users/aj`\n* `:hostname` replaced with the first domain in the list i.e. `example.com`\n\nDeveloper API\n-------------\n\nIf you are developing an `le-store-*` or `le-challenge-*` plugin you need to be aware of\nadditional internal API expectations.\n\n**IMPORTANT**:\n\nUse `v2.0.0` as your initial version - NOT v0.1.0 and NOT v1.0.0 and NOT v3.0.0.\nThis is to indicate that your module is compatible with v2.x of node-greenlock.\n\nSince the public API for your module is defined by node-greenlock the major version\nshould be kept in sync.\n\n### store implementation\n\nSee <https://git.coolaj86.com/coolaj86/le-store-SPEC.js>\n\n* getOptions()\n* accounts.\n  * checkKeypair(opts, cb)\n  * check(opts, cb)\n  * setKeypair(opts, keypair, cb)\n  * set(opts, reg, cb)\n* certificates.\n  * checkKeypair(opts, cb)\n  * check(opts, cb)\n  * setKeypair(opts, keypair, cb)\n  * set(opts, reg, cb)\n\n### challenge implementation\n\nSee https://git.coolaj86.com/coolaj86/le-challenge-fs.js\n\n* `.set(opts, domain, key, value, cb);`         // opts will be saved with domain/key\n* `.get(opts, domain, key, cb);`                // opts will be retrieved by domain/key\n* `.remove(opts, domain, key, cb);`             // opts will be retrieved by domain/key\n\nChange History\n==============\n* v2.2 - Let's Encrypt v2 Support\n  * v2.2.4 - don't promisify all of `dns`\n  * v2.2.3 - `renewWithin` default to 14 days\n  * v2.2.2 - replace git dependency with npm\n  * v2.2.1 - April 2018 **Let's Encrypt v2** support\n* v2.1.17 - Nov 5th 2017 migrate back to personal repo\n* v2.1.9 - Jan 18th 2017 renamed to greenlock\n* v2.0.2 - Aug 9th 2016 update readme\n* v2.0.1 - Aug 9th 2016\n  * major refactor\n  * simplified API\n  * modular plugins\n  * knock out bugs\n* v1.5.0 now using letiny-core v2.0.0 and rsa-compat\n* v1.4.x I can't remember... but it's better!\n* v1.1.0 Added letiny-core, removed node-letsencrypt-python\n* v1.0.2 Works with node-letsencrypt-python\n* v1.0.0 Thar be dragons\n\nLICENSE\n=======\n\nDual-licensed MIT and Apache-2.0\n\nSee LICENSE\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://git.coolaj86.com/coolaj86/greenlock.js.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "2.2.7"
}
