{
  "_args": [
    [
      {
        "raw": "acme-v2@^1.0.2",
        "scope": null,
        "escapedName": "acme-v2",
        "name": "acme-v2",
        "rawSpec": "^1.0.2",
        "spec": ">=1.0.2 <2.0.0",
        "type": "range"
      },
      "c:\\Work\\coinkat-web-server\\node_modules\\greenlock"
    ]
  ],
  "_from": "acme-v2@>=1.0.2 <2.0.0",
  "_id": "acme-v2@1.0.5",
  "_inCache": true,
  "_location": "/acme-v2",
  "_nodeVersion": "6.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/acme-v2_1.0.5_1524592617186_0.9773279999309694"
  },
  "_npmUser": {
    "name": "coolaj86",
    "email": "coolaj86@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "acme-v2@^1.0.2",
    "scope": null,
    "escapedName": "acme-v2",
    "name": "acme-v2",
    "rawSpec": "^1.0.2",
    "spec": ">=1.0.2 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/greenlock"
  ],
  "_resolved": "https://registry.npmjs.org/acme-v2/-/acme-v2-1.0.5.tgz",
  "_shasum": "7aec334ecb33b1a32344a6dd2520e5ab706befe1",
  "_shrinkwrap": null,
  "_spec": "acme-v2@^1.0.2",
  "_where": "c:\\Work\\coinkat-web-server\\node_modules\\greenlock",
  "author": {
    "name": "AJ ONeal",
    "email": "coolaj86@gmail.com",
    "url": "https://coolaj86.com/"
  },
  "dependencies": {
    "bluebird": "^3.5.1",
    "request": "^2.85.0",
    "rsa-compat": "^1.3.0"
  },
  "description": "Free SSL. A framework for building Let's Encrypt v2 clients, and other ACME v2 (draft 11) clients. Successor to le-acme-core.js",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "7aec334ecb33b1a32344a6dd2520e5ab706befe1",
    "tarball": "https://registry.npmjs.org/acme-v2/-/acme-v2-1.0.5.tgz",
    "fileCount": 11,
    "unpackedSize": 42731,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJa32/qCRA9TVsSAnZWagAAIX4P/2r+ZMUg9Dt4gXFazBqf\nqlup7lZxArhp0CtRwGELWobEpXBfsuSM2LHXDKqMJ5fn5yVTaVQPLwVH1EXc\nyATr6eBGAq+YHqkVLYMYVmTZts1AY/FHarFHIs834kLlYBPb7ZK2tiTRQ1tA\niJwHVvcz5zzRP7e0Bt3ht70wphaJvcuW4w1gtBQySOUxmFSpXbBvp8SZjMoV\n4eyGRi6TgjhMYdnZ1g5bY+oHpn9qpig8psK+POK5XuhV32hfnu3CF+M7FozT\n9gwTg0d7MxYzhG1R5sLCPqyMys57U7TfJV8Dgfx8y5arVh1I76DXl5ESVdAH\nJhBe4VSiCfOA7kATN62Zjfz/NaPBGQQ0FAUlks6kmQHuVe85sj3mPFRXCNXE\nCb1Ff6gJbqAruzyUdTTizsgN3rNqZYqkZ7cKBuT4I17hWZ4d3V0XhvT8Ikv6\nbGU5BOlAk/65gcdWEqM1B9TZ7e05OSvrXf+JcVc/1blbs0aJOP/h8d8+qUIt\nNLH2Voi1d5mJ7hdy5eSMMbcWSeoN75LZBHPcoSsGoE5Jn5eAjBk3LsEmGBAg\nOCOEBuJYwCGqExpcsgh3go2Hn75xL3Z8zQx8BkQGRyrpyrbWvyP0ZqdpKmbK\nofWRGVdHxAIxaN7OjTAVRsqaUnkKvY4Dg/R13FZkpldkRhjv1nMP5dQaimA2\nd4je\r\n=ruSD\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "gitHead": "10ab61e07e751537635a79cea5dab5110074d9eb",
  "homepage": "https://git.coolaj86.com/coolaj86/acme-v2.js",
  "keywords": [
    "acmev2",
    "acmev02",
    "acme-v2",
    "acme-v02",
    "acme",
    "acme2",
    "acme11",
    "acme-draft11",
    "acme-draft-11",
    "draft",
    "11",
    "ssl",
    "tls",
    "https",
    "Let's Encrypt",
    "letsencrypt",
    "letsencrypt-v2",
    "letsencrypt-v02",
    "letsencryptv2",
    "letsencryptv02",
    "letsencrypt2",
    "greenlock",
    "greenlock2"
  ],
  "license": "(MIT OR Apache-2.0)",
  "main": "node.js",
  "maintainers": [
    {
      "name": "coolaj86",
      "email": "coolaj86@gmail.com"
    }
  ],
  "name": "acme-v2",
  "optionalDependencies": {
    "bluebird": "^3.5.1"
  },
  "readme": "| Sponsored by [ppl](https://ppl.family)\n| **acme-v2.js** ([npm](https://www.npmjs.com/package/acme-v2))\n| [acme-v2-cli.js](https://git.coolaj86.com/coolaj86/acme-v2-cli.js)\n| [greenlock.js](https://git.coolaj86.com/coolaj86/greenlock.js)\n| [goldilocks.js](https://git.coolaj86.com/coolaj86/goldilocks.js)\n|\n\nacme-v2.js\n==========\n\nA framework for building Let's Encrypt v2 (ACME draft 11) clients, successor to `le-acme-core.js`.\nBuilt [by request](https://git.coolaj86.com/coolaj86/greenlock.js/issues/5#issuecomment-8).\n\n## Looking for Quick 'n' Easy&trade;?\n\nIf you're looking for an *ACME-enabled webserver*, try [goldilocks.js](https://git.coolaj86.com/coolaj86/goldilocks.js).\nIf you're looking to *build a webserver*, try [greenlock.js](https://git.coolaj86.com/coolaj86/greenlock.js).\n\n* [greenlock.js](https://git.coolaj86.com/coolaj86/greenlock.js)\n* [goldilocks.js](https://git.coolaj86.com/coolaj86/goldilocks.js)\n\n## How to build ACME clients\n\nAs this is intended to build ACME clients, there is not a simple 2-line example.\n\nI'd recommend first running the example CLI client with a test domain and then investigating the files used for that example:\n\n```bash\nnode examples/cli.js\n```\n\nThe example cli has the following prompts:\n\n```\nWhat web address(es) would you like to get certificates for? (ex: example.com,*.example.com)\nWhat challenge will you be testing today? http-01 or dns-01? [http-01]\nWhat email should we use? (optional)\nWhat API style would you like to test? v1-compat or promise? [v1-compat]\n\nPut the string 'mBfh0SqaAV3MOK3B6cAhCbIReAyDuwuxlO1Sl70x6bM.VNAzCR4THe4czVzo9piNn73B1ZXRLaB2CESwJfKkvRM' into a file at 'example.com/.well-known/acme-challenge/mBfh0SqaAV3MOK3B6cAhCbIReAyDuwuxlO1Sl70x6bM'\n\necho 'mBfh0SqaAV3MOK3B6cAhCbIReAyDuwuxlO1Sl70x6bM.VNAzCR4THe4czVzo9piNn73B1ZXRLaB2CESwJfKkvRM' > 'example.com/.well-known/acme-challenge/mBfh0SqaAV3MOK3B6cAhCbIReAyDuwuxlO1Sl70x6bM'\n\nThen hit the 'any' key to continue...\n```\n\nWhen you've completed the challenge you can hit a key to continue the process.\n\nIf you place the certificate you receive back in `tests/fullchain.pem`\nyou can then test it with `examples/https-server.js`.\n\n```\nexamples/cli.js\nexamples/genkeypair.js\ntests/compat.js\nexamples/https-server.js\nexamples/http-server.js\n```\n\n## Let's Encrypt Directory URLs\n\n```\n# Production URL\nhttps://acme-v02.api.letsencrypt.org/directory\n```\n\n```\n# Staging URL\nhttps://acme-staging-v02.api.letsencrypt.org/directory\n```\n\n## Two API versions, Two Implementations\n\nThis library (acme-v2.js) supports ACME [*draft 11*](https://tools.ietf.org/html/draft-ietf-acme-acme-11),\notherwise known as Let's Encrypt v2 (or v02).\n\n  * ACME draft 11\n  * Let's Encrypt v2\n  * Let's Encrypt v02\n\nThe predecessor (le-acme-core) supports Let's Encrypt v1 (or v01), which was a\n[hodge-podge of various drafts](https://github.com/letsencrypt/boulder/blob/master/docs/acme-divergences.md)\nof the ACME spec early on.\n\n  * ACME early draft\n  * Let's Encrypt v1\n  * Let's Encrypt v01\n\nThis library maintains compatibility with le-acme-core so that it can be used as a **drop-in replacement**\nand requires **no changes to existing code**,\nbut also provides an updated API more congruent with draft 11.\n\n## le-acme-core-compatible API (recommended)\n\nStatus: Stable, Locked, Bugfix-only\n\nSee Full Documentation at <https://git.coolaj86.com/coolaj86/le-acme-core.js>\n\n```\nvar RSA = require('rsa-compat').RSA;\nvar acme = require('acme-v2/compat.js').ACME.create({ RSA: RSA });\n\n//\n// Use exactly the same as le-acme-core\n//\n```\n\n## Promise API (dev)\n\nStatus: Almost stable, but **not semver locked**\n\nThis API is a simple evolution of le-acme-core,\nbut tries to provide a better mapping to the new draft 11 APIs.\n\n```\n// Create Instance (Dependency Injection)\nvar ACME = require('acme-v2').ACME.create({\n  RSA: require('rsa-compat').RSA\n\n  // other overrides\n, request: require('request')\n, promisify: require('util').promisify\n\n  // used for constructing user-agent\n, os: require('os')\n, process: require('process')\n\n  // used for overriding the default user-agent\n, userAgent: 'My custom UA String'\n, getUserAgentString: function (deps) { return 'My custom UA String'; }\n\n  // don't try to validate challenges locally\n, skipChallengeTest: false\n});\n\n\n// Discover Directory URLs\nACME.init(acmeDirectoryUrl)                   // returns Promise<acmeUrls={keyChange,meta,newAccount,newNonce,newOrder,revokeCert}>\n\n\n// Accounts\nACME.accounts.create(options)                 // returns Promise<regr> registration data\n\n    { email: '<email>'                        //    valid email (server checks MX records)\n    , accountKeypair: {                       //    privateKeyPem or privateKeyJwt\n        privateKeyPem: '<ASCII PEM>'\n      }\n    , agreeToTerms: fn (tosUrl) {}            //    returns Promise with tosUrl\n    }\n\n\n// Registration\nACME.certificates.create(options)             // returns Promise<pems={ privkey (key), cert, chain (ca) }>\n\n    { newAuthzUrl: '<url>'                    //    specify acmeUrls.newAuthz\n    , newCertUrl: '<url>'                     //    specify acmeUrls.newCert\n\n    , domainKeypair: {\n        privateKeyPem: '<ASCII PEM>'\n      }\n    , accountKeypair: {\n        privateKeyPem: '<ASCII PEM>'\n      }\n    , domains: [ 'example.com' ]\n\n    , setChallenge: fn (hostname, key, val)   // return Promise\n    , removeChallenge: fn (hostname, key)     // return Promise\n    }\n```\n\nHelpers & Stuff\n\n```javascript\n// Constants\nACME.challengePrefixes['http-01']             // '/.well-known/acme-challenge'\nACME.challengePrefixes['dns-01']              // '_acme-challenge'\n```\n\nTodo\n----\n\n* support ECDSA keys\n* Apr  5, 2018 - appears that sometimes 'pending' status cannot be progressed to 'processing' nor 'deactivated'\n  * this may be a bug in the staging API as it appears it cannot be cancelled either, but returns success status code\n\nChangelog\n---------\n\n* v1.0.3\n  * documentation cleanup\n* v1.0.2\n  * use `options.contact` to provide raw contact array\n  * made `options.email` optional\n  * file cleanup\n* v1.0.1\n  * Compat API is ready for use\n  * Eliminate debug logging\n* Apr 10, 2018 - tested backwards-compatibility using greenlock.js\n* Apr  5, 2018 - export http and dns challenge tests\n* Apr  5, 2018 - test http and dns challenges (success and failure)\n* Apr  5, 2018 - test subdomains and its wildcard\n* Apr  5, 2018 - test two subdomains\n* Apr  5, 2018 - test wildcard\n* Apr  5, 2018 - completely match api for acme v1 (le-acme-core.js)\n* Mar 21, 2018 - *mostly* matches le-acme-core.js API\n* Mar 21, 2018 - can now accept values (not hard coded)\n* Mar 20, 2018 - SUCCESS - got a test certificate (hard-coded)\n* Mar 20, 2018 - download certificate\n* Mar 20, 2018 - poll for status\n* Mar 20, 2018 - finalize order (submit csr)\n* Mar 20, 2018 - generate domain keypair\n* Mar 20, 2018 - respond to challenges\n* Mar 16, 2018 - get challenges\n* Mar 16, 2018 - new order\n* Mar 15, 2018 - create account\n* Mar 15, 2018 - generate account keypair\n* Mar 15, 2018 - get nonce\n* Mar 15, 2018 - get directory\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "ssh://gitea@git.coolaj86.com:22042/coolaj86/acme-v2.js.git"
  },
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "version": "1.0.5"
}
